version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hni-dash-ops-postgres
    environment:
      POSTGRES_DB: hni_dash_ops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hni-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # .NET API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hni-dash-ops-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=hni_dash_ops;Username=postgres;Password=postgres123
      - JwtSettings__SecretKey=your-super-secret-jwt-key-for-development-only
      - JwtSettings__Issuer=HniDashOps
      - JwtSettings__Audience=HniDashOps-Users
      - JwtSettings__ExpiryMinutes=60
      - Cors__AllowedOrigins=http://localhost:3000,http://localhost:3001
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hni-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  hni-network:
    driver: bridge
